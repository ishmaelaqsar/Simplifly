{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"webpackHotUpdate(2,{55:function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Buffer) {// var fs = require('fs');\\n\\nvar _ = __webpack_require__(35)._;\\nvar Tokenizer = __webpack_require__(60);\\nvar tokenizer = new Tokenizer();\\n\\nvar stopwords_en = __webpack_require__(65);\\nvar stopwords_vi = __webpack_require__(83);\\n\\nvar stopwords = _.union(stopwords_en, stopwords_vi);\\n\\nfunction buildDocument(text, key) {\\n    var stopOut;\\n\\n    if (typeof text === 'string') {\\n        text = tokenizer.tokenize(text.toLowerCase());\\n        stopOut = true;\\n    } else if (!_.isArray(text)) {\\n        stopOut = false;\\n        return text;\\n    }\\n\\n    return text.reduce(function(document, term) {\\n        if (typeof document[term] === 'function') document[term] = 0;\\n        if (!stopOut || stopwords.indexOf(term) < 0)\\n            document[term] = (document[term] ? document[term] + 1 : 1);\\n        return document;\\n    }, {\\n        __key: key\\n    });\\n}\\n\\nfunction tf(term, document) {\\n    return document[term] ? document[term] : 0;\\n}\\n\\nfunction documentHasTerm(term, document) {\\n    return document[term] && document[term] > 0;\\n}\\n\\nfunction TfIdf(deserialized) {\\n    if (deserialized)\\n        this.documents = deserialized.documents;\\n    else\\n        this.documents = [];\\n\\n    this._idfCache = {};\\n}\\n\\n// backwards compatibility for < node 0.10\\nfunction isEncoding(encoding) {\\n    if (typeof Buffer.isEncoding !== 'undefined')\\n        return Buffer.isEncoding(encoding);\\n    switch ((encoding + '').toLowerCase()) {\\n        case 'hex':\\n        case 'utf8':\\n        case 'utf-8':\\n        case 'ascii':\\n        case 'binary':\\n        case 'base64':\\n        case 'ucs2':\\n        case 'ucs-2':\\n        case 'utf16le':\\n        case 'utf-16le':\\n        case 'raw':\\n            return true;\\n    }\\n    return false;\\n}\\n\\nmodule.exports = TfIdf;\\nTfIdf.tf = tf;\\n\\nTfIdf.prototype.idf = function(term, force) {\\n\\n    // Lookup the term in the New term-IDF caching,\\n    // this will cut search times down exponentially on large document sets.\\n    if (this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true)\\n        return this._idfCache[term];\\n\\n    var docsWithTerm = this.documents.reduce(function(count, document) {\\n        return count + (documentHasTerm(term, document) ? 1 : 0);\\n    }, 0);\\n\\n    var idf = 1 + Math.log((this.documents.length) / (1 + docsWithTerm));\\n\\n    // Add the idf to the term cache and return it\\n    this._idfCache[term] = idf;\\n    return idf;\\n};\\n\\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\\n// Otherwise, the cache will just be wiped clean\\nTfIdf.prototype.addDocument = function(document, key, restoreCache) {\\n    this.documents.push(buildDocument(document, key));\\n\\n    // make sure the cache is invalidated when new documents arrive\\n    if (restoreCache === true) {\\n        for (var term in this._idfCache) {\\n            // invoking idf with the force option set will\\n            // force a recomputation of the idf, and it will\\n            // automatically refresh the cache value.\\n            this.idf(term, true);\\n        }\\n    } else {\\n        this._idfCache = {};\\n    }\\n};\\n\\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\\n// Otherwise, the cache will just be wiped clean\\n// TfIdf.prototype.addFileSync = function(path, encoding, key, restoreCache) {\\n//     if (!encoding)\\n//         encoding = 'utf8';\\n//     if (!isEncoding(encoding))\\n//         throw new Error('Invalid encoding: ' + encoding);\\n//\\n//     var document = fs.readFileSync(path, encoding);\\n//     this.documents.push(buildDocument(document, key));\\n//\\n//     // make sure the cache is invalidated when new documents arrive\\n//     if (restoreCache === true) {\\n//         for (var term in this._idfCache) {\\n//             // invoking idf with the force option set will\\n//             // force a recomputation of the idf, and it will\\n//             // automatically refresh the cache value.\\n//             this.idf(term, true);\\n//         }\\n//     } else {\\n//         this._idfCache = {};\\n//     }\\n// };\\n\\nTfIdf.prototype.tfidf = function(terms, d) {\\n    var _this = this;\\n\\n    if (!_.isArray(terms))\\n        terms = tokenizer.tokenize(terms.toString().toLowerCase());\\n\\n    return terms.reduce(function(value, term) {\\n        var idf = _this.idf(term);\\n        idf = idf === Infinity ? 0 : idf;\\n        return value + (tf(term, _this.documents[d]) * idf);\\n    }, 0.0);\\n};\\n\\nTfIdf.prototype.listTerms = function(d) {\\n    var terms = [];\\n\\n    for (var term in this.documents[d]) {\\n        if (term != '__key')\\n            terms.push({\\n                term: term,\\n                tfidf: this.tfidf(term, d)\\n            });\\n    }\\n\\n    return terms.sort(function(x, y) {\\n        return y.tfidf - x.tfidf;\\n    });\\n};\\n\\nTfIdf.prototype.tfidfs = function(terms, callback) {\\n    var tfidfs = new Array(this.documents.length);\\n\\n    for (var i = 0; i < this.documents.length; i++) {\\n        tfidfs[i] = this.tfidf(terms, i);\\n\\n        if (callback)\\n            callback(i, tfidfs[i], this.documents[i].__key);\\n    }\\n\\n    return tfidfs;\\n};\\n\\n// Define a tokenizer other than the default \\\"WordTokenizer\\\"\\nTfIdf.prototype.setTokenizer = function(t) {\\n    if (!_.isFunction(t.tokenize))\\n        throw new Error('Expected a valid Tokenizer');\\n    tokenizer = t;\\n};\\n\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(56).Buffer))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///55\\n\")},83:function(module,exports,__webpack_require__){\"use strict\";eval(\"/* WEBPACK VAR INJECTION */(function(__dirname) {\\n\\nvar fs = __webpack_require__(34);\\nvar path = __webpack_require__(84);\\n\\nvar words = fs.readFileSync(path.join(__dirname, './vietnamese-stopwords.txt'), 'utf8');\\n\\nmodule.exports = words.split('\\\\n').map(function(word) {\\n        return (word || '').trim();\\n}).filter(function(word) {\\n        return word !== false && word.length > 0;\\n})\\n\\n/* WEBPACK VAR INJECTION */}.call(this, \\\"/\\\"))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmlldG5hbWVzZS1zdG9wd29yZHMvaW5kZXguanM/ZmIwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIHdvcmRzID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3ZpZXRuYW1lc2Utc3RvcHdvcmRzLnR4dCcpLCAndXRmOCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdvcmRzLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24od29yZCkge1xuICAgICAgICByZXR1cm4gKHdvcmQgfHwgJycpLnRyaW0oKTtcbn0pLmZpbHRlcihmdW5jdGlvbih3b3JkKSB7XG4gICAgICAgIHJldHVybiB3b3JkICE9PSBmYWxzZSAmJiB3b3JkLmxlbmd0aCA+IDA7XG59KVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///83\\n\")},84:function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// resolves . and .. elements in a path array with directory names there\\n// must be no slashes, empty elements, or device names (c:\\\\) in the array\\n// (so also no leading and trailing slashes - it does not distinguish\\n// relative and absolute paths)\\nfunction normalizeArray(parts, allowAboveRoot) {\\n  // if the path tries to go above the root, `up` ends up > 0\\n  var up = 0;\\n  for (var i = parts.length - 1; i >= 0; i--) {\\n    var last = parts[i];\\n    if (last === '.') {\\n      parts.splice(i, 1);\\n    } else if (last === '..') {\\n      parts.splice(i, 1);\\n      up++;\\n    } else if (up) {\\n      parts.splice(i, 1);\\n      up--;\\n    }\\n  }\\n\\n  // if the path is allowed to go above the root, restore leading ..s\\n  if (allowAboveRoot) {\\n    for (; up--; up) {\\n      parts.unshift('..');\\n    }\\n  }\\n\\n  return parts;\\n}\\n\\n// Split a filename into [root, dir, basename, ext], unix version\\n// 'root' is just a slash, or nothing.\\nvar splitPathRe =\\n    /^(\\\\/?|)([\\\\s\\\\S]*?)((?:\\\\.{1,2}|[^\\\\/]+?|)(\\\\.[^.\\\\/]*|))(?:[\\\\/]*)$/;\\nvar splitPath = function(filename) {\\n  return splitPathRe.exec(filename).slice(1);\\n};\\n\\n// path.resolve([from ...], to)\\n// posix version\\nexports.resolve = function() {\\n  var resolvedPath = '',\\n      resolvedAbsolute = false;\\n\\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\\n    var path = (i >= 0) ? arguments[i] : process.cwd();\\n\\n    // Skip empty and invalid entries\\n    if (typeof path !== 'string') {\\n      throw new TypeError('Arguments to path.resolve must be strings');\\n    } else if (!path) {\\n      continue;\\n    }\\n\\n    resolvedPath = path + '/' + resolvedPath;\\n    resolvedAbsolute = path.charAt(0) === '/';\\n  }\\n\\n  // At this point the path should be resolved to a full absolute path, but\\n  // handle relative paths to be safe (might happen when process.cwd() fails)\\n\\n  // Normalize the path\\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\\n    return !!p;\\n  }), !resolvedAbsolute).join('/');\\n\\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\\n};\\n\\n// path.normalize(path)\\n// posix version\\nexports.normalize = function(path) {\\n  var isAbsolute = exports.isAbsolute(path),\\n      trailingSlash = substr(path, -1) === '/';\\n\\n  // Normalize the path\\n  path = normalizeArray(filter(path.split('/'), function(p) {\\n    return !!p;\\n  }), !isAbsolute).join('/');\\n\\n  if (!path && !isAbsolute) {\\n    path = '.';\\n  }\\n  if (path && trailingSlash) {\\n    path += '/';\\n  }\\n\\n  return (isAbsolute ? '/' : '') + path;\\n};\\n\\n// posix version\\nexports.isAbsolute = function(path) {\\n  return path.charAt(0) === '/';\\n};\\n\\n// posix version\\nexports.join = function() {\\n  var paths = Array.prototype.slice.call(arguments, 0);\\n  return exports.normalize(filter(paths, function(p, index) {\\n    if (typeof p !== 'string') {\\n      throw new TypeError('Arguments to path.join must be strings');\\n    }\\n    return p;\\n  }).join('/'));\\n};\\n\\n\\n// path.relative(from, to)\\n// posix version\\nexports.relative = function(from, to) {\\n  from = exports.resolve(from).substr(1);\\n  to = exports.resolve(to).substr(1);\\n\\n  function trim(arr) {\\n    var start = 0;\\n    for (; start < arr.length; start++) {\\n      if (arr[start] !== '') break;\\n    }\\n\\n    var end = arr.length - 1;\\n    for (; end >= 0; end--) {\\n      if (arr[end] !== '') break;\\n    }\\n\\n    if (start > end) return [];\\n    return arr.slice(start, end - start + 1);\\n  }\\n\\n  var fromParts = trim(from.split('/'));\\n  var toParts = trim(to.split('/'));\\n\\n  var length = Math.min(fromParts.length, toParts.length);\\n  var samePartsLength = length;\\n  for (var i = 0; i < length; i++) {\\n    if (fromParts[i] !== toParts[i]) {\\n      samePartsLength = i;\\n      break;\\n    }\\n  }\\n\\n  var outputParts = [];\\n  for (var i = samePartsLength; i < fromParts.length; i++) {\\n    outputParts.push('..');\\n  }\\n\\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\\n\\n  return outputParts.join('/');\\n};\\n\\nexports.sep = '/';\\nexports.delimiter = ':';\\n\\nexports.dirname = function(path) {\\n  var result = splitPath(path),\\n      root = result[0],\\n      dir = result[1];\\n\\n  if (!root && !dir) {\\n    // No dirname whatsoever\\n    return '.';\\n  }\\n\\n  if (dir) {\\n    // It has a dirname, strip trailing slash\\n    dir = dir.substr(0, dir.length - 1);\\n  }\\n\\n  return root + dir;\\n};\\n\\n\\nexports.basename = function(path, ext) {\\n  var f = splitPath(path)[2];\\n  // TODO: make this comparison case-insensitive on windows?\\n  if (ext && f.substr(-1 * ext.length) === ext) {\\n    f = f.substr(0, f.length - ext.length);\\n  }\\n  return f;\\n};\\n\\n\\nexports.extname = function(path) {\\n  return splitPath(path)[3];\\n};\\n\\nfunction filter (xs, f) {\\n    if (xs.filter) return xs.filter(f);\\n    var res = [];\\n    for (var i = 0; i < xs.length; i++) {\\n        if (f(xs[i], i, xs)) res.push(xs[i]);\\n    }\\n    return res;\\n}\\n\\n// String.prototype.substr - negative index don't work in IE8\\nvar substr = 'ab'.substr(-1) === 'b'\\n    ? function (str, start, len) { return str.substr(start, len) }\\n    : function (str, start, len) {\\n        if (start < 0) start = str.length + start;\\n        return str.substr(start, len);\\n    }\\n;\\n\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(36)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///84\\n\")}});","extractedComments":[]}