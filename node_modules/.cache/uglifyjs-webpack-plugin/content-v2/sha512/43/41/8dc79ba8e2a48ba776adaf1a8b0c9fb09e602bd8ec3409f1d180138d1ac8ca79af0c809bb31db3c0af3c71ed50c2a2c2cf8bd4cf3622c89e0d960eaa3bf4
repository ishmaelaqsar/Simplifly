{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"webpackHotUpdate(2,{55:function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(34);\\n\\nvar _ = __webpack_require__(35)._;\\nvar Tokenizer = __webpack_require__(60);\\nvar tokenizer = new Tokenizer();\\n\\nvar stopwords_en = __webpack_require__(65);\\n// var stopwords_vi = require('vietnamese-stopwords');\\n\\nvar stopwords = _.union(stopwords_en, stopwords_vi);\\n\\nfunction buildDocument(text, key) {\\n    var stopOut;\\n\\n    if (typeof text === 'string') {\\n        text = tokenizer.tokenize(text.toLowerCase());\\n        stopOut = true;\\n    } else if (!_.isArray(text)) {\\n        stopOut = false;\\n        return text;\\n    }\\n\\n    return text.reduce(function(document, term) {\\n        if (typeof document[term] === 'function') document[term] = 0;\\n        if (!stopOut || stopwords.indexOf(term) < 0)\\n            document[term] = (document[term] ? document[term] + 1 : 1);\\n        return document;\\n    }, {\\n        __key: key\\n    });\\n}\\n\\nfunction tf(term, document) {\\n    return document[term] ? document[term] : 0;\\n}\\n\\nfunction documentHasTerm(term, document) {\\n    return document[term] && document[term] > 0;\\n}\\n\\nfunction TfIdf(deserialized) {\\n    if (deserialized)\\n        this.documents = deserialized.documents;\\n    else\\n        this.documents = [];\\n\\n    this._idfCache = {};\\n}\\n\\n// backwards compatibility for < node 0.10\\nfunction isEncoding(encoding) {\\n    if (typeof Buffer.isEncoding !== 'undefined')\\n        return Buffer.isEncoding(encoding);\\n    switch ((encoding + '').toLowerCase()) {\\n        case 'hex':\\n        case 'utf8':\\n        case 'utf-8':\\n        case 'ascii':\\n        case 'binary':\\n        case 'base64':\\n        case 'ucs2':\\n        case 'ucs-2':\\n        case 'utf16le':\\n        case 'utf-16le':\\n        case 'raw':\\n            return true;\\n    }\\n    return false;\\n}\\n\\nmodule.exports = TfIdf;\\nTfIdf.tf = tf;\\n\\nTfIdf.prototype.idf = function(term, force) {\\n\\n    // Lookup the term in the New term-IDF caching,\\n    // this will cut search times down exponentially on large document sets.\\n    if (this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true)\\n        return this._idfCache[term];\\n\\n    var docsWithTerm = this.documents.reduce(function(count, document) {\\n        return count + (documentHasTerm(term, document) ? 1 : 0);\\n    }, 0);\\n\\n    var idf = 1 + Math.log((this.documents.length) / (1 + docsWithTerm));\\n\\n    // Add the idf to the term cache and return it\\n    this._idfCache[term] = idf;\\n    return idf;\\n};\\n\\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\\n// Otherwise, the cache will just be wiped clean\\nTfIdf.prototype.addDocument = function(document, key, restoreCache) {\\n    this.documents.push(buildDocument(document, key));\\n\\n    // make sure the cache is invalidated when new documents arrive\\n    if (restoreCache === true) {\\n        for (var term in this._idfCache) {\\n            // invoking idf with the force option set will\\n            // force a recomputation of the idf, and it will\\n            // automatically refresh the cache value.\\n            this.idf(term, true);\\n        }\\n    } else {\\n        this._idfCache = {};\\n    }\\n};\\n\\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\\n// Otherwise, the cache will just be wiped clean\\nTfIdf.prototype.addFileSync = function(path, encoding, key, restoreCache) {\\n    if (!encoding)\\n        encoding = 'utf8';\\n    if (!isEncoding(encoding))\\n        throw new Error('Invalid encoding: ' + encoding);\\n\\n    var document = fs.readFileSync(path, encoding);\\n    this.documents.push(buildDocument(document, key));\\n\\n    // make sure the cache is invalidated when new documents arrive\\n    if (restoreCache === true) {\\n        for (var term in this._idfCache) {\\n            // invoking idf with the force option set will\\n            // force a recomputation of the idf, and it will\\n            // automatically refresh the cache value.\\n            this.idf(term, true);\\n        }\\n    } else {\\n        this._idfCache = {};\\n    }\\n};\\n\\nTfIdf.prototype.tfidf = function(terms, d) {\\n    var _this = this;\\n\\n    if (!_.isArray(terms))\\n        terms = tokenizer.tokenize(terms.toString().toLowerCase());\\n\\n    return terms.reduce(function(value, term) {\\n        var idf = _this.idf(term);\\n        idf = idf === Infinity ? 0 : idf;\\n        return value + (tf(term, _this.documents[d]) * idf);\\n    }, 0.0);\\n};\\n\\nTfIdf.prototype.listTerms = function(d) {\\n    var terms = [];\\n\\n    for (var term in this.documents[d]) {\\n        if (term != '__key')\\n            terms.push({\\n                term: term,\\n                tfidf: this.tfidf(term, d)\\n            });\\n    }\\n\\n    return terms.sort(function(x, y) {\\n        return y.tfidf - x.tfidf;\\n    });\\n};\\n\\nTfIdf.prototype.tfidfs = function(terms, callback) {\\n    var tfidfs = new Array(this.documents.length);\\n\\n    for (var i = 0; i < this.documents.length; i++) {\\n        tfidfs[i] = this.tfidf(terms, i);\\n\\n        if (callback)\\n            callback(i, tfidfs[i], this.documents[i].__key);\\n    }\\n\\n    return tfidfs;\\n};\\n\\n// Define a tokenizer other than the default \\\"WordTokenizer\\\"\\nTfIdf.prototype.setTokenizer = function(t) {\\n    if (!_.isFunction(t.tokenize))\\n        throw new Error('Expected a valid Tokenizer');\\n    tokenizer = t;\\n};\\n\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(56).Buffer))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///55\\n\")},66:!1,67:!1});","extractedComments":[]}